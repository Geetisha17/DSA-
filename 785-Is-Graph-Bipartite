class Solution {
    bool dfs(int node,vector<vector<int>>&graph,vector<int>&vis,int col)
    {
        vis[node] = col;

        for(auto it:graph[node])
        {
            if(vis[it]==-1)
            {
                if(!dfs(it,graph,vis,!col)) return false;
            }
            else if(vis[it] == col)
            {
                return false;
            }
        }
        return true;
        // queue<int>q;
        // q.push(node);
        // vis[node]=0;

        // while(!q.empty())
        // {
        //     int cur = q.front();
        //     q.pop();

        //     for(auto it:graph[cur])
        //     {
        //         if(vis[it]==-1)
        //         {
        //             vis[it]=!vis[cur];
        //             q.push(it);
        //         }
        //         else if(vis[it] == vis[cur])
        //         {
        //             return false;
        //         }
        //     }
        // }
        // return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>vis(n,-1);

        for(int i=0;i<n;i++)
        {
            if(vis[i]==-1)
            {
                if(!dfs(i,graph,vis,0)) return false;
            }
        }
        return true;
    }
};